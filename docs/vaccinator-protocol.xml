<?xml version="1.0" encoding="UTF-8"?>
<book version="5.0" xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml"
      xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <title>@PRODUCT@ protocol</title>

    <author>
      <personname><firstname>Various</firstname>
      <surname>authors</surname></personname>

      <email>v.schmid@inspirant.de</email>

      <affiliation>
        <orgname>Volker Schmid</orgname>
      </affiliation>
    </author>

    <pubdate>@DATE@</pubdate>

    <productnumber>@VERSION@</productnumber>
  </info>

  <chapter>
    <title>Content</title>

    <toc/>

    <para/>
  </chapter>

  <chapter>
    <title>Client Protocol</title>

    <para>This chapter is describing the protocol for using the @PRODUCT@
    pseudonymisation service. This is the internal communication for the
    @PRODUCT@ service and not to become implemented by customers
    developers.</para>

    <para>The client protocol is implemented in JavaScipt and offers access to
    all pseudonymisation functions and management functions of @PRODUCT@.
    <emphasis role="bold">It is not the endpoint presented to the developers.
    </emphasis>Instead, this is communication between the JavaScript class and
    the @PRODUCT@ service itself.</para>

    <para>The endpoint interface for developers is described in the next
    chapter "Client API".</para>

    <section>
      <title>Implementation details</title>

      <para>The protocol is REST based and works by sending information using
      POST requests. The functionality at the service provider is established
      by some sort of intermediate handling between client and identity
      management. The described client protocol is used between the client
      implementation and the @PRODUCT@ service. The service provider always
      forwards all the requests to the @PRODUCT@ service and only adds his
      access information fields to the request (sid and spwd). The results are
      also forwarded back to the calling client then. A few functions like
      <literal>pAdd</literal> also return data that is interesting for the
      service provider. He can use this to update his own database.</para>

      <para>The JSON encoded structure, containing the function name and all
      needed parameters, is typically sent in a POST field named
      <literal>json</literal>. A typical call consists of some operation code
      (<literal>op</literal>) and some field containing the encrypted data for
      the @PRODUCT@ service (<literal>data</literal>). The optional
      <literal>uid</literal> field is for API users to identify calls to some
      specific user or assigning return values to internal identifiers. It can
      be unset (empty) or contain some value. It is not used for @PRODUCT@
      identity management.</para>

      <para>All calls will return a JSON encoded string, containing the result
      of the operation and additional information.</para>

      <para>There is always a <literal>status</literal> field returned. If it
      is not OK, something went wrong. In this case, the status is either
      INVALID or ERROR. An additional <literal>code</literal> field contains
      the error number and the <literal>desc</literal> field contains
      additional information about the error (only if
      <literal>status</literal> is not OK).</para>

      <para>The <literal>data</literal> field contains encrypted payload for
      the identity management. It is encrypted due to contained receipt. A
      data field is always encoded like this:</para>

      <programlisting>receipt:cs:iv:payload</programlisting>

      <itemizedlist>
        <listitem>
          <para>The <literal>receipt</literal> defines the used algorithm for
          encryption.</para>
        </listitem>

        <listitem>
          <para>The <literal>cs</literal> value is the checksum of the used
          app-id key (last byte in hex, see app-id description).</para>
        </listitem>

        <listitem>
          <para>The <literal>iv</literal> is the start vector/nonce for
          encryption in hex encoding.</para>
        </listitem>

        <listitem>
          <para>The <literal>payload</literal> is the hex or base64 encoded
          JSON string with encrypted payload data.</para>
        </listitem>
      </itemizedlist>

      <para>It typically looks like in this example:</para>

      <programlisting>chacha20:f7:29a1c8b68d8a:Z2Zkc2dmZG1rZyBmZ(...)XI0N2Z2IDZyNHkzMmY0Mw==</programlisting>

      <para>This encryption is done automatically by the client API and
      happens transparently for the end users and service provider
      developers.</para>

      <para><emphasis role="bold">NOTE: </emphasis>By this encryption, using
      the app-id as key, the service provider and the @PRODUCT@ service both
      do not have access to the content (for example patient data). The
      checksum as part of the receipt allows later verification, if the
      dataset was encrypted with one or maybe a newer app-id. This is useful
      if, for example, the changeAppId() function failed during processing
      (please refer to changeAppId() function description in API
      description).</para>

      <para><emphasis role="bold">NOTE:</emphasis> The above chosen
      ChaCha20/12 cipher is just the reference implementation. You can also
      use AES 256 (cbc-aes-256) or other encryption algorithms. The only thing
      to respect is the encoding using hex for the <literal>cs</literal> and
      the <literal>iv/nonce</literal>.</para>

      <para><emphasis role="bold">References:</emphasis></para>

      <para><link
      xlink:href="https://en.wikipedia.org/wiki/Salsa20#ChaCha20_adoption">https://en.wikipedia.org/wiki/Salsa20#ChaCha20_adoption</link></para>
    </section>

    <section>
      <title>Transport encryption</title>

      <para>Of course, all API REST calls are using standard SSL connections
      (https). But in order to make sure that even the service provider does
      not know the end users identities, some data is also encrypted. The
      encrypted information is transported in the <literal>data</literal>
      field of the POST calls.</para>

      <para>The <literal>data</literal> field is encrypted using the SHA256
      from the end users app-id as password. We will start implementing
      ChaCha20 encryption with individual IV. See above chapter about
      implementation details.</para>
    </section>

    <section>
      <title>Error codes</title>

      <para>In case of an error, the <literal>status</literal> value is not
      OK, instead it is either INVALID or ERROR. INVALID means that some data
      you provided triggered the error and ERROR is some @PRODUCT@ related
      internal error. If INVALID, you need to check your input.</para>

      <para>The system then returns two additional fields:</para>

      <informaltable colsep="1" frame="all" rowsep="1" tabstyle="jsonSpec">
        <tgroup cols="3">
          <colspec colwidth="120*"/>

          <colspec colwidth="688*"/>

          <colspec colwidth="192*"/>

          <thead>
            <row>
              <entry align="center">code</entry>

              <entry align="center">desc</entry>

              <entry align="center">status</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>1</entry>

              <entry>Missing Parameters.</entry>

              <entry>INVALID</entry>
            </row>

            <row>
              <entry>2</entry>

              <entry>Wrong Protocol.</entry>

              <entry>INVALID</entry>
            </row>

            <row>
              <entry>3</entry>

              <entry>Your software seems outdated.</entry>

              <entry>INVALID</entry>
            </row>

            <row>
              <entry>4</entry>

              <entry>The account was locked due to possible misuse.</entry>

              <entry>INVALID</entry>
            </row>

            <row>
              <entry>5</entry>

              <entry>Invalid credentials (check sid and spwd).</entry>

              <entry>INVALID</entry>
            </row>

            <row>
              <entry>6</entry>

              <entry>Invalid encoding (check data values and JSON
              integrity).</entry>

              <entry>INVALID</entry>
            </row>

            <row>
              <entry>7</entry>

              <entry>Not found (pid is not found in the system).</entry>

              <entry>INVALID</entry>
            </row>

            <row>
              <entry>8</entry>

              <entry>Invalid partner (you are not allowed to access foreign
              data).</entry>

              <entry>INVALID</entry>
            </row>

            <row>
              <entry>9</entry>

              <entry>Invalid parameter size (some parameter exceeds
              limits).</entry>

              <entry>INVALID</entry>
            </row>

            <row>
              <entry>99</entry>

              <entry>Some internal service error happened. Please contact
              %PRODUCT% support.</entry>

              <entry>ERROR</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>

    <section>
      <title>Add new person</title>

      <para>This call is adding a new person to the system.</para>

      <informaltable colsep="1" frame="all" rowsep="1" tabstyle="jsonSpec">
        <tgroup cols="2">
          <colspec colwidth="186*"/>

          <colspec colwidth="814*"/>

          <thead>
            <row>
              <entry align="center">Field</entry>

              <entry align="center">Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>op</entry>

              <entry>add</entry>
            </row>

            <row>
              <entry>data</entry>

              <entry>Encrypted data for the containing all the data to be
              stored (string blob, use base64 encoding for binary data).
              Please follow the encoding scheme described in "Implementation
              Details".</entry>
            </row>

            <row>
              <entry>uid</entry>

              <entry>User identifier provided by the API user.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>Result:</para>

      <informaltable colsep="1" frame="all" rowsep="1" tabstyle="jsonSpec">
        <tgroup cols="2">
          <colspec colwidth="186*"/>

          <colspec colwidth="814*"/>

          <thead>
            <row>
              <entry align="center">Field</entry>

              <entry align="center">Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>status</entry>

              <entry><para>Either OK, INVALID or ERROR. See generic
              description for details.</para></entry>
            </row>

            <row>
              <entry>uid</entry>

              <entry>User identifier provided by the API user during call
              (only if it was provided).</entry>
            </row>

            <row>
              <entry>pid</entry>

              <entry>New id for the newly generated person. This may be stored
              by the service provider and get assigned to the calling client
              (identified by uid).</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para><emphasis role="bold">Important implementation note:</emphasis> If
      you forward some positive result to the client, please take the returned
      <literal>pid</literal> and add this to your service provider database
      while assigning to the user. By this, you are able to send your client
      software a complete and up to date list of all PIDs at any time.</para>
    </section>

    <section>
      <title>Update person</title>

      <para>This call is updating an existing entry.</para>

      <informaltable>
        <tgroup cols="2">
          <colspec colwidth="185*"/>

          <colspec colwidth="815*"/>

          <thead>
            <row>
              <entry align="center">Field</entry>

              <entry align="center">Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>op</entry>

              <entry>update</entry>
            </row>

            <row>
              <entry>data</entry>

              <entry>Encrypted payload containing all the data to get updated
              (string blob, use b64 encoding for binary data).</entry>
            </row>

            <row>
              <entry>pid</entry>

              <entry>Person ID to update.</entry>
            </row>

            <row>
              <entry>uid</entry>

              <entry>User identifier provided by the API user.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>Result:</para>

      <informaltable colsep="1" frame="all" rowsep="1" tabstyle="jsonSpec">
        <tgroup cols="2">
          <colspec colwidth="185*"/>

          <colspec colwidth="815*"/>

          <thead>
            <row>
              <entry align="center">Field</entry>

              <entry align="center">Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>status</entry>

              <entry><para>Either OK, INVALID or ERROR. See generic
              description for details.</para></entry>
            </row>

            <row>
              <entry>uid</entry>

              <entry>User identifier provided by the API user during call
              (only if it was provided).</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para><emphasis role="bold">Important implementation note:</emphasis>
      Updating payload data is critical to the local caches of the JS class.
      If multiple systems accessing the data, the cache of the other systems
      is outdated after some update. Only the system which did the changes is
      up to date. Therefore, this has to be handled special: Please create a
      unique code (eg time stamp or random number) in case you forward some
      <literal>update</literal> request to the @PRODUCT@ service. This code
      has to be sent to your client application as soon as possible (maybe as
      part of your protocol). There, please call the
      <literal>wipeCache()</literal> function with this code every time. This
      will trigger the local cache to refresh in case something has changed.
      Please refer to the <literal>wipeCache()</literal> function description
      in API documentation.</para>
    </section>

    <section>
      <title>Retrieve person</title>

      <para>This call is retrieving the data of one or more existing
      entries.</para>

      <informaltable>
        <tgroup cols="2">
          <colspec colwidth="186*"/>

          <colspec colwidth="814*"/>

          <thead>
            <row>
              <entry align="center">Field</entry>

              <entry align="center">Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>op</entry>

              <entry>get</entry>
            </row>

            <row>
              <entry>pid</entry>

              <entry><para>Person ID to retrieve data
              from.</para><para>Multiple PIDs may become requested by
              concatenating them using blank as divider character. The maximum
              allowed PIDs is 500 per request.</para></entry>
            </row>

            <row>
              <entry>uid</entry>

              <entry>User identifier provided by the API user.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>Result:</para>

      <informaltable colsep="1" frame="all" rowsep="1" tabstyle="jsonSpec">
        <tgroup cols="2">
          <colspec colwidth="187*"/>

          <colspec colwidth="813*"/>

          <thead>
            <row>
              <entry align="center">Field</entry>

              <entry align="center">Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>status</entry>

              <entry><para>Either OK, INVALID or ERROR. See generic
              description for details.</para></entry>
            </row>

            <row>
              <entry>uid</entry>

              <entry>User identifier provided by the API user during call
              (only if it was provided).</entry>
            </row>

            <row>
              <entry>data</entry>

              <entry>This contains the payload(s). Payload always comes as a
              object array where the PID is the key. It has one entry in case
              only one PID was requested and multiple entries in case of
              multiple results. Every given PID creates a return value, even
              if it was not found or suspicious. Note: The order is not
              guaranteed to be the same as provided in the request!</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>The returned result always confirms to this JSON schema, written
      as a complete example answer:</para>

      <programlisting>{
  "status": "OK",
  "version": "0.0.0.0",
  "uid": 12345,
  "data": {
    "f315db7b01721026308a5346ce3cb513": {
      "status": "OK",
      "data": "chacha20:7f:29a1c8b68d8a:btewwyzox3i3fe4cg6a1qzi8pqoqa55orzf4bcxtjfcf5chep998sj6"
    },
    "2ff18992cfc290d3d648aea5bdea38b1": {
      "status": "NOTFOUND",
      "data": false
    }
  }
}</programlisting>

      <para>The above example showing the result of a request with two PIDs.
      The first was a valid request, the second was some unknown entry.</para>
    </section>

    <section>
      <title>Delete person</title>

      <para>This call is deleting an existing entry.</para>

      <informaltable>
        <tgroup cols="2">
          <colspec colwidth="185*"/>

          <colspec colwidth="815*"/>

          <thead>
            <row>
              <entry align="center">Field</entry>

              <entry align="center">Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>op</entry>

              <entry>delete</entry>
            </row>

            <row>
              <entry>pid</entry>

              <entry><para>Person ID to delete from
              service.</para><para>Multiple PIDs may become requested by
              concatenating them using blank as divider character. The maximum
              allowed PIDs is 500 per request.</para></entry>
            </row>

            <row>
              <entry>uid</entry>

              <entry>User identifier provided by the API user.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>Result:</para>

      <informaltable colsep="1" frame="all" rowsep="1" tabstyle="jsonSpec">
        <tgroup cols="2">
          <colspec colwidth="187*"/>

          <colspec colwidth="813*"/>

          <thead>
            <row>
              <entry align="center">Field</entry>

              <entry align="center">Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>status</entry>

              <entry><para>Either OK, INVALID or ERROR. See generic
              description for details.</para></entry>
            </row>

            <row>
              <entry>uid</entry>

              <entry>User identifier provided by the API user during call
              (only if it was provided).</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>

    <section>
      <title>Check connection</title>

      <para>This is just a simple "ping" sort of call to verify if the service
      is available.</para>

      <informaltable>
        <tgroup cols="2">
          <colspec colwidth="185*"/>

          <colspec colwidth="815*"/>

          <thead>
            <row>
              <entry align="center">Field</entry>

              <entry align="center">Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>op</entry>

              <entry>check</entry>
            </row>

            <row>
              <entry>uid</entry>

              <entry>User identifier provided by the API user.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>Result:</para>

      <informaltable colsep="1" frame="all" rowsep="1" tabstyle="jsonSpec">
        <tgroup cols="2">
          <colspec colwidth="187*"/>

          <colspec colwidth="813*"/>

          <thead>
            <row>
              <entry align="center">Field</entry>

              <entry align="center">Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>status</entry>

              <entry><para>OK</para></entry>
            </row>

            <row>
              <entry>uid</entry>

              <entry>User identifier provided by the API user during call
              (only if it was provided).</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>This is not a function that does anything. It is just answering
      with status "OK". This is also not verifying the validity using
      <literal>sid</literal> and <literal>spwd</literal>.</para>
    </section>
  </chapter>

  <chapter>
    <title>Implementation of protocol forward</title>

    <para>This chapter explains, what a service provider has to do to
    successfully handle and forward REST protocol requests.</para>

    <section>
      <title>Forward requests by adding service provider credentials</title>

      <para>In general, all requests have to become forwarded to the @PRODUCT@
      service URL. The JSON encoded in <literal>json</literal> data value must
      get enhanced by two additional values:</para>

      <informaltable colsep="1" frame="all" rowsep="1" tabstyle="jsonSpec">
        <tgroup cols="2">
          <colspec colwidth="187*"/>

          <colspec colwidth="813*"/>

          <thead>
            <row>
              <entry align="center">Field</entry>

              <entry align="center">Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>sid</entry>

              <entry><para>The service provider ID. This is provided to the
              service provider by the @PRODUCT@ service staff.</para></entry>
            </row>

            <row>
              <entry>spwd</entry>

              <entry>The service provider password. This is provided to the
              service provider by the @PRODUCT@ service staff.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para>Upon the JSON request was updated by sid and spwd, the request is
      forwarded to the @PRODUCT@ service URL (provided to you by the @PRODUCT@
      service staff). The returned result is sent as an answer to the calling
      end user client (eg web browser API).</para>
    </section>

    <section>
      <title>Observe and enrich function calls</title>

      <para>In addition, the service provider has to observe the functions to
      provide additional functionality required.</para>

      <para><emphasis role="bold">update call</emphasis></para>

      <para>The update call will out date all other participants local caches.
      Therefore, they need to know about this. The only party able to tell
      them is you. This is done by acting in case of a positive "update" call.
      In case the @PRODUCT@ service announces success, please generate a time
      stamp (or random token) and provide it to all affected clients. By
      knowing the pid from the request, you should be able to know the
      affected persons (logins). You send them this time stamp with their next
      request and they will have to call the wipeCache() function with this as
      parameter. If the API recognises this time stamp/token as already know,
      nothing will happen. If it does not know this value yet, it will wipe
      it's cache and regenerate it on demand later.</para>

      <para><emphasis role="bold">ALL user requests (get, update and
      delete)</emphasis></para>

      <para>Here you might want to verify it the logged in user is allowed to
      handle data about this PID. This would be some important security layer
      to prevent manipulations in local client to retrieve or manipulate data
      of PIDs the user is not allowed to. Here, please forward the request
      only if the user is allowed to. Please follow the protocol description
      above and, if not allowed, send some status "INVALID" and code 7 (pid
      not found).</para>
    </section>
  </chapter>
</book>
